import firebase_admin
from firebase_admin import credentials, db
import json
import websocket
import threading
import time
import requests

# тЬЕ Firebase Initialization Check
if not firebase_admin._apps:  # ЁЯФе Check рдЕрдЧрд░ рдкрд╣рд▓реЗ рд╕реЗ Initialize рд╣реИ рддреЛ рджреЛрдмрд╛рд░рд╛ рдордд рдХрд░реЛ
    firebase_credentials = json.loads(os.getenv("FIREBASE_CREDENTIALS"))
    cred = credentials.Certificate(firebase_credentials)  # рдЕрдкрдиреЗ JSON Key рдХрд╛ рд╕рд╣реА Path рдбрд╛рд▓реЛ
    firebase_admin.initialize_app(cred, {
        'databaseURL': os.getenv(DATABASE_URL) # рдЕрдкрдирд╛ рд╕рд╣реА URL рдбрд╛рд▓реЛ
    })

# тЬЕ Railway рд╕реЗ API Key рдФрд░ Secret Key рд▓реЛрдб рдХрд░рдирд╛
UPSTOX_API_KEY = os.getenv("UPSTOX_API_KEY")
UPSTOX_SECRET_KEY = os.getenv("UPSTOX_SECRET_KEY")

# тЬЕ Firebase рд╕реЗ Stock List Fetch рдХрд░рдиреЗ рдХрд╛ Function
def get_stock_list():
    try:
        ref = db.reference("/stocks/nifty50")  # ЁЯФе "stocks/nifty50" рд╕реЗ Data рд▓рд╛рдУ
        stock_data = ref.get()  # тЬЕ Data Fetch

        if not stock_data:
            print("тЪая╕П Firebase рд╕реЗ рдХреЛрдИ Data рдирд╣реАрдВ рдорд┐рд▓рд╛!")
            return {}

        print("тЬЕ Firebase Data Received:", stock_data)  # Debugging Log
        return stock_data  # Dictionary Format рдореЗрдВ Return рдХрд░реЗрдЧрд╛
    except Exception as e:
        print(f"тЭМ Firebase Error: {str(e)}")
        return {}

# тЬЕ Upstox API рд╕реЗ LTP (Last Traded Price) рд▓рд╛рдиреЗ рдХрд╛ Function
def get_stock_ltp(instrument_keys):
    try:
        headers = {
            "x-api-key": UPSTOX_API_KEY, 
            "Content-Type": "application/json"
        }
        
        payload = {"instrument_keys": instrument_keys}  # ЁЯФе Upstox рдХреЛ рд╕рднреА Stocks рдХреА Keys рднреЗрдЬреЛ
        response = requests.post(UPSTOX_LTP_URL, headers=headers, json=payload)  # тЬЕ API Call

        if response.status_code == 200:
            data = response.json()
            return data.get("ltp", {})  # ЁЯФе LTP Data Return рдХрд░реЛ
        else:
            print(f"тЭМ Upstox API Error: {response.text}")
            return {}
    except Exception as e:
        print(f"тЭМ Upstox API Exception: {str(e)}")
        return {}

# тЬЕ WebSocket рд╕реЗ Data Send рдХрд░рдиреЗ рдХрд╛ Function
def send_stock_data(ws):
    while True:
        stocks_data = get_stock_list()  # ЁЯФе Firebase рд╕реЗ Stock Symbols рдФрд░ рдЙрдирдХреА Instrument Keys рд▓реЛ
        if stocks_data:
            instrument_keys = list(stocks_data.values())  # ЁЯФе рд╕рднреА Instrument Keys рд▓реЛ
            ltp_data = get_stock_ltp(instrument_keys)  # тЬЕ Upstox рд╕реЗ LTP рд▓реЛ

            # ЁЯФе Final Payload рдмрдирд╛рдУ
            final_data = {
                "nifty50": {
                    stock: {"instrument_key": stocks_data[stock], "ltp": ltp_data.get(stocks_data[stock], "N/A")}
                    for stock in stocks_data
                }
            }

            payload = json.dumps(final_data)  # JSON Format рдореЗрдВ Convert
            print("ЁЯУМ Sending Data to WebSocket:", payload)  # Debugging Log
            ws.send(payload)  # тЬЕ WebSocket рдХреЛ Send рдХрд░реЛ

        time.sleep(5)  # ЁЯФД рд╣рд░ 5 рд╕реЗрдХрдВрдб рдореЗрдВ Data Refresh рд╣реЛрдЧрд╛

# тЬЕ WebSocket Connection Function
def on_open(ws):
    print("тЬЕ Connected to WebSocket Server")
    threading.Thread(target=send_stock_data, args=(ws,)).start()

def on_message(ws, message):
    print(f"ЁЯУй Server Response: {message}")

def on_error(ws, error):
    print(f"тЭМ WebSocket Error: {error}")

def on_close(ws, close_status_code, close_msg):
    print("ЁЯФ┤ WebSocket Closed")

# тЬЕ WebSocket Server URL (рдЕрдкрдирд╛ рд╕рд╣реА URL рдбрд╛рд▓реЛ)
ws_url = "ws://your-websocket-server.com"

# тЬЕ WebSocket Client Setup
ws = websocket.WebSocketApp(ws_url, 
                            on_open=on_open, 
                            on_message=on_message, 
                            on_error=on_error, 
                            on_close=on_close)

# тЬЕ WebSocket рдХреЛ рдЕрд▓рдЧ Thread рдореЗрдВ Start рдХрд░реЛ
ws_thread = threading.Thread(target=ws.run_forever)
ws_thread.start()
