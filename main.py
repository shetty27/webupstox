import json
import firebase_admin
from firebase_admin import credentials, firestore
from upstox_api.api import Upstox
import websocket
import asyncio
import websockets  # WebSocket Server ‡§ï‡•á ‡§≤‡§ø‡§è

# üîπ Firebase Setup (Firestore Authentication)
if not firebase_admin._apps:
    cred = credentials.Certificate("serviceAccountKey.json")
    firebase_admin.initialize_app(cred)
db = firestore.client()


# ‚úÖ Firestore ‡§∏‡•á Access Token ‡§≤‡•á‡§®‡§æ
def get_access_token():
    doc_ref = db.collection("tokens").document("upstox")
    token_data = doc_ref.get().to_dict()
    if token_data:
        return token_data.get("access_token")
    else:
        return None
        
# üîπ Upstox API Credentials
API_KEY = "your-upstox-api-key"
ACCESS_TOKEN = get_access_token()  # Firestore ‡§∏‡•á Access Token ‡§≤‡§æ‡§ì

if not ACCESS_TOKEN:
    print("‚ùå Access Token not found in Firestore!")
    exit()

# üîπ Upstox Object Create ‡§ï‡§∞‡•á‡§Ç
u = Upstox(API_KEY, ACCESS_TOKEN)
u.get_master_contract('NSE_EQ')  # NSE ‡§ï‡•á ‡§≤‡§ø‡§è Master Contract ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç

# üîπ Firebase Firestore ‡§∏‡•á Stock List Load ‡§ï‡§∞‡•á‡§Ç
def get_stock_list():
    stock_list_ref = db.collection("StockLists").document("stocks")
    stock_data = stock_list_ref.get()
    if stock_data.exists:
        return stock_data.to_dict()
    return {}

stock_data = get_stock_list()

all_symbols = []
if stock_data:
    all_symbols = stock_data.get("Nifty50", []) + stock_data.get("NiftySmallcap50", []) + stock_data.get("NiftyMidcap50", [])

# üîπ WebSocket ‡§∏‡•á Real-time Data Send ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Clients ‡§ï‡•Ä Dynamic List
clients = set()

async def send_data_to_clients(data):
    """ WebSocket Clients ‡§ï‡•ã Live Data Send ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ Function """
    if clients:  # ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à Client Connected ‡§π‡•à, ‡§§‡§≠‡•Ä Data Send ‡§ï‡§∞‡•á‡§Ç
        message = json.dumps(data)
        await asyncio.wait([ws.send(message) for ws in clients])

def on_quote_update(ws, data):
    """ ‡§ú‡§¨ ‡§≠‡•Ä Upstox ‡§∏‡•á ‡§®‡§Ø‡§æ Price Update ‡§Ü‡§è, Clients ‡§ï‡•ã Send ‡§ï‡§∞‡•ã """
    asyncio.run(send_data_to_clients(data))

def on_connect(ws):
    """ ‡§ú‡§¨ WebSocket Connect ‡§π‡•ã, ‡§§‡§¨ Stocks Subscribe ‡§ï‡§∞‡•ã """
    print("‚úÖ WebSocket Connected! Subscribing to Stocks...")
    u.set_on_quote_update(on_quote_update)
    u.subscribe(all_symbols, u.get_quote)
    print(f"‚úÖ Subscribed to {len(all_symbols)} Stocks.")

async def websocket_handler(websocket, path):
    """ ‡§ú‡§¨ Android App Connect ‡§π‡•ã‡§ó‡•Ä, ‡§§‡•ã ‡§â‡§∏‡•á Clients List ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•ã """
    clients.add(websocket)
    print(f"üîó New Client Connected! Total Clients: {len(clients)}")
    
    try:
        async for message in websocket:
            pass  # ‡§Ö‡§≠‡•Ä Client ‡§∏‡•á ‡§ï‡•ã‡§à Request ‡§®‡§π‡•Ä‡§Ç ‡§Ü ‡§∞‡§π‡•Ä, ‡§¨‡§∏ Data ‡§≠‡•á‡§ú ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
    finally:
        clients.remove(websocket)
        print(f"‚ùå Client Disconnected! Remaining Clients: {len(clients)}")

# üîπ WebSocket Server Run ‡§ï‡§∞‡•ã (Android App ‡§ï‡•á ‡§≤‡§ø‡§è)
start_server = websockets.serve(websocket_handler, "0.0.0.0", 8765)

async def main():
    await start_server
    u.set_on_connect(on_connect)
    u.start_websocket(True)

asyncio.run(main())
